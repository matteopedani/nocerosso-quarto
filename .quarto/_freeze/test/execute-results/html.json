{
  "hash": "da8c5aaff9e60e12feda19b1fa7f4488",
  "result": {
    "markdown": "---\ntitle: \"Theming with bslib and thematic\"\noutput: \n  html_document:\n    code_folding: show\n    theme:\n      bg: \"#202123\"\n      fg: \"#B8BCC2\"\n      primary: \"#EA80FC\"\n      secondary: \"#00DAC6\"\n      base_font:\n        google: Prompt\n      heading_font:\n        google: Proza Libre\n---\n\n\n\n\n## R Markdown\n\nThis is an R Markdown document themed with [`{bslib}` package](https://rstudio.github.io/bslib/). `{bslib}` makes it easy to customize the main colors and fonts of a `html_document`, [`flexdashboard::flex_dashboard`](https://flexdashboard-pkg.netlify.app/articles/articles/theme.html), [shiny::fluidPage()](https://shiny.rstudio.com/reference/shiny/latest/fluidPage.html), or more generally any website that uses [Bootstrap](https://getbootstrap.com/) for styling. The `theme` parameter in the yaml front-matter of this Rmd document describes a [`bslib::bs_theme()`](https://rstudio.github.io/bslib/reference/bs_theme.html) object, which provides access to 100s of [theming options](https://rstudio.github.io/bslib/articles/bs5-variables.html) (via its `...` argument) in addition to the main options demonstrated here (e.g., `bg`, `fg`, `primary`, etc).\n\nThis particular example uses `{bslib}`'s default [Bootstrap version (which, at the time of writing, is Bootstrap 5)](https://rstudio.github.io/bslib/articles/bslib.html#versions). However, if reproducibility is important, it's recommended that you \"lock-in\" the version by adding `version: 5` to the `theme` definition.\n\n## Themed Plots {.tabset .tabset-pills}\n\nWhen running this document with [`{thematic}`](https://rstudio.github.io/thematic/) installed, the `thematic::thematic_rmd(font = \"auto\")` effectively translates `theme` (CSS) settings to new global theming defaults for `{ggplot2}`, `{lattice}`, and `{base}` R graphics:\n\n### ggplot2\n\n\n::: {.cell fig.showtext='false'}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(mpg, aes(displ, hwy)) +\n  geom_point() + geom_smooth()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nError : The fig.showtext code chunk option must be TRUE\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](test_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n### lattice\n\n\n::: {.cell fig.showtext='false'}\n\n```{.r .cell-code}\nlattice::show.settings()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nError : The fig.showtext code chunk option must be TRUE\n```\n:::\n\n::: {.cell-output-display}\n![](test_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n### base\n\n\n::: {.cell fig.showtext='false'}\n\n```{.r .cell-code}\nplot(pressure, col = thematic::thematic_get_option(\"accent\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nError : The fig.showtext code chunk option must be TRUE\n```\n:::\n\n::: {.cell-output-display}\n![](test_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "test_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}